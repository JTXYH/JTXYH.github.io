(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{629:function(t,a,s){"use strict";s.r(a);var r=s(6),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",[t._v("负责从文件系统或者网络中加载Class文件")])]),t._v(" "),s("h2",{attrs:{id:"类加载子系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统"}},[t._v("#")]),t._v(" 类加载子系统")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"加载简图",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210407161552.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210407161552.png",alt:"加载简图"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"加载详情图",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210408094858.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210408094858.png",alt:"加载详情图"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"Classloader角色   ",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210408100836.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210408100836.png",alt:"Classloader角色   "}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"类的加载过程",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412113006.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412113006.png",alt:"类的加载过程"}})])]),t._v(" "),s("h2",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("ol",[s("li",[t._v("负责从文件系统或者网络中加载Class文件，"),s("strong",[t._v("Class文件开头有特定标识")])]),t._v(" "),s("li",[t._v("Classloader只负责class文件的"),s("strong",[t._v("加载")]),t._v("，至于是否可运行，则由"),s("strong",[t._v("执行引擎(Execution Engine)决定")])]),t._v(" "),s("li",[t._v("加载的类信息存放于称为方法区的内存空间，除了类信息，方法区还会存放运行时常量池信息，还可能包括字符串字面量和数字常量(这部分常量信息是Class文件中常量池部分的内存映射)，常量池运行时加载到内存中，即运行时常量池")])]),t._v(" "),s("h2",{attrs:{id:"加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[t._v("#")]),t._v(" 加载")]),t._v(" "),s("p",[s("strong",[t._v("加载刚好是加载过程的一个阶段")]),t._v("，二者意思不能混淆")]),t._v(" "),s("ol",[s("li",[t._v("通过一个类的"),s("strong",[t._v("全限定名获取定义此类的二进制字节流")]),t._v(" "),s("ul",[s("li",[t._v("本地系统获取")]),t._v(" "),s("li",[t._v("网络获取，Web Applet")]),t._v(" "),s("li",[t._v("zip压缩包获取，jar，war")]),t._v(" "),s("li",[t._v("运行时计算生成，动态代理")]),t._v(" "),s("li",[t._v("有其他文件生成，jsp")]),t._v(" "),s("li",[t._v("专有数据库提取.class文件，比较少见")]),t._v(" "),s("li",[t._v("加密文件中获取，防止Class文件被反编译的保护措施")])])]),t._v(" "),s("li",[t._v("将这个字节流所代表的的静态存储结果转化为方法区的运行时数据结构")]),t._v(" "),s("li",[s("strong",[t._v("在内存中生成一个代表这个类的java.lang.Class对象")]),t._v("，作为方法区这个类的各种数据访问入口")])]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("h3",{attrs:{id:"验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[t._v("#")]),t._v(" 验证")]),t._v(" "),s("p",[t._v("确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全")]),t._v(" "),s("p",[t._v("主要包括四种验证方式："),s("code",[t._v("文件格式验证,元数据验证,字节码验证,符号引用验证")])]),t._v(" "),s("h3",{attrs:{id:"准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[t._v("#")]),t._v(" 准备")]),t._v(" "),s("ul",[s("li",[t._v("为类变量分配内存，并且设置该类变量的初始值，即零值")]),t._v(" "),s("li",[s("strong",[t._v("不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化")])]),t._v(" "),s("li",[s("strong",[t._v("不会为实例变量分配初始化")]),t._v("，类变量会分配在方法区中，实例变量会随着对象一起分配到Java堆中")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"零值的类型",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210408101722.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210408101722.png",alt:"零值的类型"}})])]),t._v(" "),s("h3",{attrs:{id:"解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[t._v("#")]),t._v(" 解析")]),t._v(" "),s("ul",[s("li",[t._v("将常量池内的符号引用转换为直接引用的过程，事实上，解析操作往往会伴随着"),s("strong",[t._v("JVM在执行完初始化之后再执行")])]),t._v(" "),s("li",[t._v("符号引用就是一组符号来描述引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中")]),t._v(" "),s("li",[t._v("直接引用就是直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄")]),t._v(" "),s("li",[t._v("解析动作主要针对类，或接口，字段，类方法，接口方法，方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info")])]),t._v(" "),s("h2",{attrs:{id:"初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("初始化阶段是执行类构造器方法"),s("clinit",[t._v("()的过程")])],1)]),t._v(" "),s("li",[t._v("此方法不需要定义，是javac编译器自动收集类中的"),s("strong",[t._v("所有类变量的赋值动作和静态代码块中的语句合并而来，没有的话就不存在clint")])]),t._v(" "),s("li",[t._v("构造器方法中指令按照语句在源文中出现的顺序执行")]),t._v(" "),s("li",[s("strong",[s("clinit",[t._v("()不同于类的构造器（关联：构造器是虚拟机视角下的"),s("init",[t._v("()）")])],1)],1)]),t._v(" "),s("li",[t._v("若该类具有父类，JVM会保证"),s("strong",[t._v("子类的"),s("clinit",[t._v("()执行前，父类的"),s("clinit",[t._v("()已经执行完毕")])],1)],1)]),t._v(" "),s("li",[t._v("虚拟机必须保证一个类的"),s("clinit",[t._v("()方法在多线程下被同步加锁")])],1)]),t._v(" "),s("h2",{attrs:{id:"类加载器分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器分类"}},[t._v("#")]),t._v(" 类加载器分类")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"分类",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412131855.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412131855.png",alt:"分类"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"获取类的加载器",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412135045.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412135045.png",alt:"获取类的加载器"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"加载器获取",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412131933.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412131933.png",alt:"加载器获取"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132003.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132003.png",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[t._v("#")]),t._v(" ClassLoader")]),t._v(" "),s("p",[t._v("是一个抽象类，除了启动类加载器，其他类加载器都继承自他")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132555.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132555.png",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"启动类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器"}},[t._v("#")]),t._v(" 启动类加载器")]),t._v(" "),s("ul",[s("li",[t._v("C/C++语言实现，嵌套JVM内部")]),t._v(" "),s("li",[t._v("用来加载Java核心类库，"),s("code",[t._v("rt.jar,resources.jar,sun.boot.class.path路径下的内容")])])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132103.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132103.png",alt:""}})])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("并不继承java.lang.ClassLoader，没有父加载器")])]),t._v(" "),s("li",[t._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器")]),t._v(" "),s("li",[t._v("出于安全考虑，Bootstrap启动类加载器只加载包名为java\\javax\\sun等开头的类")])]),t._v(" "),s("h3",{attrs:{id:"扩展类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器"}},[t._v("#")]),t._v(" 扩展类加载器")]),t._v(" "),s("ul",[s("li",[t._v("Java语言编写，由"),s("code",[t._v("sun.misc.Launcher$ExtClassLoader")]),t._v("实现")]),t._v(" "),s("li",[s("code",[t._v("派生于ClassLoader类")])]),t._v(" "),s("li",[t._v("父类加载器为启动类加载器")]),t._v(" "),s("li",[t._v("从java.ext.dirs系统属性所指定的目录中加载类库，或从jre/lib/ext子目录下加载类库")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132213.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412132213.png",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"应用程序类加载器（系统类加载器）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器（系统类加载器）"}},[t._v("#")]),t._v(" 应用程序类加载器（系统类加载器）")]),t._v(" "),s("ul",[s("li",[t._v("Java语言编写，由"),s("code",[t._v("sun.misc.Launcher$AppClassLoader")]),t._v("实现")]),t._v(" "),s("li",[s("code",[t._v("派生于ClassLoader类")])]),t._v(" "),s("li",[t._v("父类加载器为扩展类加载器")]),t._v(" "),s("li",[s("strong",[t._v("负责加载环境变量classpath或系统属性java.class.path指定路径下的类库")])]),t._v(" "),s("li",[t._v("该类加载器是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载")]),t._v(" "),s("li",[t._v("通过ClassLoader#getSystemClassLoader（）方法可以后去到改类加载器")])]),t._v(" "),s("h3",{attrs:{id:"用户自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义类加载器"}},[t._v("#")]),t._v(" 用户自定义类加载器")]),t._v(" "),s("p",[t._v("为什么要用自定义类加载器")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("隔离加载类")]),t._v("，例如使中间件的Jar包与应用程序Jar包不冲突")]),t._v(" "),s("li",[s("strong",[t._v("修改类加载的方式")]),t._v("，启动类加载器必须使用，其他可以根据需要自定义加载")]),t._v(" "),s("li",[s("strong",[t._v("扩展加载源")])]),t._v(" "),s("li",[s("strong",[t._v("防止源码泄露")]),t._v("，对字节码进行加密，自定义类加载器实现解密")])]),t._v(" "),s("p",[t._v("实现：")]),t._v(" "),s("ol",[s("li",[t._v("继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器")]),t._v(" "),s("li",[t._v("jdk1.2之前，继承并重写loadClass方法")]),t._v(" "),s("li",[t._v("jdk1.2之后，建议把自定义的类加载逻辑写在findClass()方法中")]),t._v(" "),s("li",[t._v("如果没有太过复杂的需求，可以直接继承URLClassLoader类，可以避免自己编写findClass方法，及其获取字节码流的方式，使自定义类加载器编写更加简洁")])]),t._v(" "),s("h2",{attrs:{id:"双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[t._v("#")]),t._v(" 双亲委派机制")]),t._v(" "),s("p",[t._v("Java虚拟机对Class文件采用的是"),s("strong",[t._v("按需加载")]),t._v("，而且加载class文件时，Java虚拟机使用的是双亲委派模式，即把请求交由父类处理，它是异种任务委派模式")]),t._v(" "),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("ol",[s("li",[t._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载。而是把这个请求委托给父类的加载器去执行")]),t._v(" "),s("li",[t._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器")]),t._v(" "),s("li",[s("strong",[t._v("如果父类的加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载")]),t._v("，这就是双亲委派模式")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"委派",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412135658.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412135658.png",alt:"委派"}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"加载其他",href:"https://gitee.com/jtxyh/blogImg/raw/master/20210412140616.png"}},[s("img",{attrs:{src:"https://gitee.com/jtxyh/blogImg/raw/master/20210412140616.png",alt:"加载其他"}})])]),t._v(" "),s("h3",{attrs:{id:"优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),s("ol",[s("li",[t._v("避免重复加载")]),t._v(" "),s("li",[t._v("保护程序安全，防止核心API被篡改")])]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("p",[t._v("在JVM中表示两个class对象，是否为同一个类存在两个必要条件")]),t._v(" "),s("ol",[s("li",[t._v("类的完整类名必须一致，包括包名")]),t._v(" "),s("li",[t._v("加载这个类的ClassLoader必须相同")])]),t._v(" "),s("p",[t._v("JVM必须知道一个类型是由启动类加载器加载的，还是由用户类加载器加载的。如果是用户类加载器加载的，"),s("strong",[t._v("JVM会将这个类加载器的一个引用作为类型信息的一部分，保存到方法区中。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);